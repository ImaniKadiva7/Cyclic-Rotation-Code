// you can use includes, for example:
#include <algorithm>
#include <vector>
#include <iostream>

using namespace std;

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;

vector<int> solution(string &S, vector<int> &P, vector<int> &Q) {
    // Implement your solution here
    int N = S.size();
    int a = 0, c = 0, g = 0, t = 0;
    vector<int> A(N, 0), C(N, 0), G(N, 0), T(N, 0);
    for(int i = 0; i < N; i++)
    {
        if(S[i] == 'A')
        {
            a++;
        }
        else if(S[i] == 'C')
        {
            c++;
        }
        else if(S[i] == 'G')
        {
            g++;
        }
        else if(S[i] == 'T')
        {
            t++;
        }

        A[i] = a;
        C[i] = c;
        G[i] = g;
        T[i] = t;
    }

    vector<int> R;

    for(int i = 0; i < P.size(); i++)
    {
        if(P[i] == Q[i])
        {
            if(S[P[i]] == 'A')
            {
                R.push_back(1);
            }
            else if(S[P[i]] == 'C')
            {
                R.push_back(2);
            }              
            else if(S[P[i]] == 'G')
            {
                R.push_back(3);
            }
            else if(S[P[i]] == 'T')
            {
                R.push_back(4);
            }
        }
        else if( (A[P[i]] < A[Q[i]]) || (S[P[i]] == 'A') )
        {
            R.push_back(1);
        }
        else if( (C[P[i]] < C[Q[i]]) || (S[P[i]] == 'C') )
        {
            R.push_back(2);
        }
        else if( (G[P[i]] < G[Q[i]]) || (S[P[i]] == 'G') )
        {
            R.push_back(3);
        }
        else if( (T[P[i]] < T[Q[i]]) || (S[P[i]] == 'T') )
        {
            R.push_back(4);
        }
    }
    return R;
}

//=========================================================================================

# you can write to stdout for debugging purposes, e.g.
# print("this is a debug message")

def solution(S, P, Q):
    # Implement your solution here
    a = 0
    c = 0
    g = 0
    t = 0
    N = len(S)
    A = [0] * N
    C = [0] * N
    G = [0] * N
    T = [0] * N

    for i in range(0, N):
        if S[i] == 'A':
            a+=1
        elif S[i] == 'C':
            c+=1
        elif S[i] == 'G':
            g+=1
        elif S[i] == 'T':
            t+=1
        
        A[i] = a
        C[i] = c
        G[i] = g
        T[i] = t
    
    R = []
    for i in range(0, len(P)):
        if P[i] == Q[i]:
            if S[P[i]] == 'A':
                R.append(1)
            elif S[P[i]] == 'C':
                R.append(2)
            elif S[P[i]] == 'G':
                R.append(3)
            elif S[P[i]] == 'T':
                R.append(4)
        elif (A[P[i]] < A[Q[i]]) or S[P[i]] == 'A':
            R.append(1)
        elif (C[P[i]] < C[Q[i]]) or S[P[i]] == 'C':
            R.append(2)
        elif (G[P[i]] < G[Q[i]]) or S[P[i]] == 'G':
            R.append(3)
        elif (T[P[i]] < T[Q[i]]) or S[P[i]] == 'T':
            R.append(4)
    return R
    pass