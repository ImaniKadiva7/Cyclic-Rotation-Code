// My FrogRiverOne codility problem solution code in C++

// you can use includes, for example:
#include <algorithm>
#include <vector>
#include <iostream>

using namespace std;

// you can write to stdout for debugging purposes, e.g.
// cout << "this is a debug message" << endl;

int solution(int X, vector<int> &A) {
    // Implement your solution here
    /*
        X = 5
        A = [ 1, 3, 1, 4, 2, 3, 5, 4 ]
        return the earliest time the frog can jump to the other side of the river
        return -1 if the frog can't jump to the other side of the river     
    */

    int N = A.size();
    vector<int> B(X, -1);

    for(int i = 0; i < N; i++)
    {
        if( (A[i] <= X) && B[A[i] - 1] == -1 )
        {
            B[A[i] - 1] = i;
        }
    }

    int earliest_time = 0;

    for(int i = 0; i < B.size(); i++)
    {
        if(B[i] == -1)
        {
            return -1;
        }
        else if(earliest_time < B[i])
        {
            earliest_time = B[i];
        }
    }
    return (earliest_time);
}

//==============================================================================================
// My FrogRiverOne codility problem solution code in Python

# you can write to stdout for debugging purposes, e.g.
# print("this is a debug message")

def solution(X, A):
    # Implement your solution here
    B = [-1] * X
    N = len(A)
    for i in range(0, N):
        if A[i] <= X and B[A[i] - 1] == -1:
            B[A[i] - 1] = i
    earliest_time = 0

    for i in range(0, len(B)):
        if B[i] == -1:
            return -1
        elif earliest_time < B[i]:
            earliest_time = B[i]
    return earliest_time
    pass